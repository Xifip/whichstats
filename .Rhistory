summary(iris)
d <- data.frame(res = c(33, 3))
d
d$res
class(d$res)
d <- data.frame(res = factor(c(33, 3)))
d <- data.frame(res = factor(c(33, 3), levels = c("a","b")))
class(d$res)
qplot(d$res)
install.packages("ggplot2")
install.packages('ply', ‘digest’, ‘reshape2’, ‘scales’)
install.packages('ply', 'digest', 'reshape2', 'scales')
install.packages("ggplot2", dependencies=...)
install.packages("ggplot2", dependencies=T)
install.packages("ggplot2")
library("ggplot2", lib.loc="/home/john/R/x86_64-pc-linux-gnu-library/3.0")
source('~/R_workspace/dublin_r_workshops/bootstrap2014/setup.R')
install("fBasics")
install.packages("fBasics")
install.packages("fBasics")
install.packages("fBasics")
install.packages("fBasics")
install.packages("tseries")
install.packages("tseries")
source('~/R_workspace/dublin_r_workshops/bootstrap2014/setup.R')
install.packages("tseries")
install.packages("tseries")
source('~/R_workspace/dublin_r_workshops/bootstrap2014/setup.R')
source('~/R_workspace/dublin_r_workshops/bootstrap2014/setup.R')
source('~/R_workspace/dublin_r_workshops/bootstrap2014/setup.R')
install.packages("fBasics")
setwd("~/R_workspace/whichstats")
source('~/R_workspace/whichstats/likert_plot.R')
head(merge_pos_survey)
train_test_ds <- scale(merge_pos_survey)
train_test_dfs <- data.frame(train_test_ds)
pretty_palette <- c("#1f77b4", '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2')
## custom palette as per kohonen package (not compulsory)
source('coolBlueHotRed.R')
names(train_train_dfs)
selectedFactors <- c(3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)
d <- train_dfs[selectedFactors]
d <- train_test_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.som <- som(data = dm.sc,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
install.packages("kohonen")
library("kohonen", lib.loc="/home/john/R/x86_64-pc-linux-gnu-library/3.1")
dm.som <- som(data = dm.sc,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
dm.sc
summary(dm.sc)
dm.nona <- na.omit(dm.sc)
summary(dm.nona)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
source('~/R_workspace/whichstats/som.R')
source('~/R_workspace/whichstats/som.R')
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
issues$issue_question_text
questions
questions$question_text
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
names(dm.nona)
head(dm.nona)
head(train_train_dfs)
names(train_train_dfs)
issues$issue_question_text
names(train_train_dfs)
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
issuesQuestions <- issues$issue_question_text
colnames <- c("res_voter_id"    "res_response_id", survey_short_questions, issuesQuestions)
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
issuesQuestions <- issues$issue_question_text
colnames <- c("res_voter_id", "res_response_id", survey_short_questions, issuesQuestions)
colnames
issuesQuestions
levels(issuesQuestions)
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
issuesQuestions <- issues$issue_question_text
colnames <- c("res_voter_id", "res_response_id", survey_short_questions, levels(issuesQuestions))
colnames
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
issuesQuestions <- issues$issue_question_text
descriptive_colnames <- c("res_voter_id", "res_response_id", survey_short_questions, levels(issuesQuestions))
colnames(train_train_dfs) <- descriptive_colnames
selectedFactors <- c(3:36)
selectedFactors
d <- train_train_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.nona <- na.omit(dm.sc)
set.seed(50000)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
survey_short_questions <- c("Gender", "Age", "Education", "Party affinity", "Party voting intention", "Voting reason", "Left-right")
issuesQuestions <- issues$issue_question_text
descriptive_colnames <- c("res_voter_id", "res_response_id", survey_short_questions, issuesQuestions)
colnames(train_train_dfs) <- descriptive_colnames
selectedFactors <- c(3:36)
d <- train_train_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.nona <- na.omit(dm.sc)
set.seed(50000)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
mydata <- dm.som$codes
mydata
mydata <- dm.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
png('plots/som/process/wss.png')
plot(wss)
dev.off()
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(dm.som$codes)),6)
# plot these results:
#plot(dm.som, type="mapping", bgcol = pretty_palette[som_cluster], main = "Clusters")
png('plots/som/results/clusters.png')
plot(dm.som, type="mapping",  bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(dm.som, som_cluster)
dev.off()
names(train_train_dfs)
head(train_train_dfs)
summary(train_train_dfs$Left-right)
summary(train_train_dfs$"Left-right"")
summary(train_train_dfs$"Left-right")
str(train_train_dfs$"Left-right")
plot(train_train_dfs$"Left-right")
hist(train_train_dfs$"Left-right")
max(train_train_dfs$"Left-right")
min(train_train_dfs$"Left-right")
min(omit.na(train_train_dfs$"Left-right"))
min(na.omit(train_train_dfs$"Left-right"))
max(na.omit(train_train_dfs$"Left-right"))
names(train_train_dfs)
source('~/R_workspace/whichstats/som.R')
mydata <- dm.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
png('plots/som/process/wss.png')
plot(wss)
dev.off()
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(dm.som$codes)),6)
png('plots/som/results/clusters.png')
plot(dm.som, type="mapping",  bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(dm.som, som_cluster)
dev.off()
issuesQuestions
issuesQuestions <- c("Prioritise building of social housing in Limerick",
"Support low-income families with rent suppliment over social housing",
"One-off rural housing is damaging to the countryside",
"Ghost estates should be demolished",
"Water rates should not be introduced",
"Reduce Property Tax, even if it means cutting local services",
"Ring-fenced property tax for local spending",
"Increase business ratese in line with other cities",
"Allocate more money for Traveller accommodation",
"More schools should be removed from Church patronage",
"Council should impound unlicenced horses",
"Council should continue support for Gay Pride",
"work for unemployment benefits",
"Asylum seekers should be allowed to work",
"evict anti-social local authority tenants",
"prioritise bypasses for congested towns",
"The Council should oppose wind farms",
"welcome water metering for water conservation",
"prioritise bus and cycle lanes",
"prioritise revitalising Limerick city centre",
"rename Shannon Bridge",
"more free car parking in the city",
"more pedestrianisation",
"directly elected Mayor for Limerick",
"local referendums",
"Community groups role in Council decision-making",
"balance of male and female candidates")
descriptive_colnames <- c("res_voter_id", "res_response_id", survey_short_questions, issuesQuestions)
colnames(train_train_dfs) <- descriptive_colnames
## select factors
#sp_4 <- sp_3#[,!(names(sp_3) %in% c("Total.Z", "Time.in.REM", "Time.in.Wake", "Time.in.Light", "Time.in.Deep", "Times.Woken"))]
# remove NA's and select factors
selectedFactors <- c(3:5, 9:36)
d <- train_train_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.nona <- na.omit(dm.sc)
# call som function
set.seed(50000)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
# plot the process plots
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
# plot the results
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
mydata <- dm.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
png('plots/som/process/wss.png')
plot(wss)
dev.off()
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(dm.som$codes)),6)
png('plots/som/results/clusters.png')
plot(dm.som, type="mapping",  bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(dm.som, som_cluster)
dev.off()
issuesQuestions <- c("Prioritise building of social housing in Limerick",
"Favor rent suppliment over social housing",
"One-off rural housing is damaging to the countryside",
"Ghost estates should be demolished",
"Water rates should not be introduced",
"Reduce Property Tax, even if it means cutting services",
"Ring-fenced property tax for local spending",
"Increase business ratese in line with other cities",
"Allocate more money for Traveller accommodation",
"More schools should be removed from Church patronage",
"Council should impound unlicenced horses",
"Council should continue support for Gay Pride",
"work for unemployment benefits",
"Asylum seekers should be allowed to work",
"evict anti-social local authority tenants",
"prioritise bypasses for congested towns",
"The Council should oppose wind farms",
"welcome water metering for water conservation",
"prioritise bus and cycle lanes",
"prioritise revitalising Limerick city centre",
"rename Shannon Bridge",
"more free car parking in the city",
"more pedestrianisation",
"directly elected Mayor for Limerick",
"local referendums",
"Community groups role in Council decision-making",
"balance of male and female candidates")
descriptive_colnames <- c("res_voter_id", "res_response_id", survey_short_questions, issuesQuestions)
colnames(train_train_dfs) <- descriptive_colnames
## select factors
#sp_4 <- sp_3#[,!(names(sp_3) %in% c("Total.Z", "Time.in.REM", "Time.in.Wake", "Time.in.Light", "Time.in.Deep", "Times.Woken"))]
# remove NA's and select factors
selectedFactors <- c(3:5, 9:36)
d <- train_train_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.nona <- na.omit(dm.sc)
# call som function
set.seed(50000)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
# plot the process plots
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
# plot the results
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
mydata <- dm.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
png('plots/som/process/wss.png')
plot(wss)
dev.off()
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(dm.som$codes)),6)
png('plots/som/results/clusters.png')
plot(dm.som, type="mapping",  bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(dm.som, som_cluster)
dev.off()
source('~/R_workspace/whichstats/som.R')
selectedFactors <- c(3:5, 9:16)
d <- train_train_dfs[selectedFactors]
dm.sc <- as.matrix(d)
dm.nona <- na.omit(dm.sc)
# call som function
set.seed(50000)
dm.som <- som(data = dm.nona,
keep.data = TRUE,
n.hood = "circular",
alpha=c(0.05,0.01),
rlen=100,
grid = somgrid(12, 12, "hexagonal"))
# plot the process plots
png('plots/som/process/changes.png')
plot(dm.som, type="changes")
dev.off()
png('plots/som/process/count.png')
plot(dm.som, type="count")
dev.off()
png('plots/som/process/dist_neighbours.png')
plot(dm.som, type="dist.neighbours")
dev.off()
png('plots/som/process/codes.png')
plot(dm.som, type="codes")
dev.off()
# plot the results
n <- dim(d)[2]
#print(n)
for(i in 1:n){
sel <- i
png(paste('plots/som/results/', tolower(gsub("\\.", "",colnames(dm.som$data)[sel])),'.png', sep = ''))
plot(dm.som, type = "property", property = dm.som$codes[,sel], main=colnames(dm.som$data)[sel], palette.name=coolBlueHotRed)
dev.off()
}
mydata <- dm.som$codes
wss <- (nrow(mydata)-1)*sum(apply(mydata,2,var))
for (i in 2:15) {
wss[i] <- sum(kmeans(mydata, centers=i)$withinss)
}
png('plots/som/process/wss.png')
plot(wss)
dev.off()
## use hierarchical clustering to cluster the codebook vectors
som_cluster <- cutree(hclust(dist(dm.som$codes)),6)
png('plots/som/results/clusters.png')
plot(dm.som, type="mapping",  bgcol = pretty_palette[som_cluster], main = "Clusters")
add.cluster.boundaries(dm.som, som_cluster)
dev.off()
